(()=>{"use strict";class t{constructor(t="New layer",e=!1,i,s){this.name=t,this.locked=e,this.width=i,this.height=s,this.opacity=255,this.visible=!0,this.data=new ImageData(i,s)}}const e=new class{constructor(t="New palette"){this.name=t,this.colors=[[]]}addColor(t){this.colors.push(t)}removeColor(t){this.colors.splice(t,1)}setColor(t,e){this.colors[t]=e}getColor(t){return this.colors[t]}}("Default");e.colors=[[0,0,0,255],[252,252,252,255],[248,248,248,255],[188,188,188,255],[124,124,124,255],[164,228,252,255],[60,188,252,255],[0,120,248,255],[0,0,252,255],[184,184,248,255],[104,136,252,255],[0,88,248,255],[0,0,188,255],[216,184,248,255],[152,120,248,255],[104,68,252,255],[68,40,188,255],[248,184,248,255],[248,120,248,255],[216,0,204,255],[148,0,132,255],[248,164,192,255],[248,88,152,255],[228,0,88,255],[168,0,32,255],[240,208,176,255],[248,120,88,255],[248,56,0,255],[168,16,0,255],[252,224,168,255],[252,160,68,255],[228,92,16,255],[136,20,0,255],[248,216,120,255],[248,184,0,255],[172,124,0,255],[80,40,0,255],[216,248,120,255],[184,248,24,255],[0,184,0,255],[0,120,0,255],[184,248,184,255],[88,216,84,255],[0,168,0,255],[0,104,0,255],[184,248,216,255],[88,248,152,255],[0,168,68,255],[0,88,0,255],[0,252,252,255],[0,232,216,255],[0,136,136,255],[0,64,88,255],[248,216,248,255],[120,120,120,255]];class i{constructor(i,s){this.width=i,this.height=s,this.data=[],this.palette=e,this.data=[new t("Background",!0,i,s)]}setCanvasSize(t,e){this.width=t,this.height=e,this.data.forEach((i=>{const s=i.data;i.data=new ImageData(t,e),i.data.data.set(s.data)}))}}class s{constructor(t){this.data=t,this.timestamp=Date.now()}}class a{constructor(){this.max=5,this.stack=[],this.buffer=null}add(t){this.stack.length>=this.max&&this.stack.shift(),this.stack.push(new s(t))}undo(){return this.stack.length>0?(this.buffer=this.stack.pop(),this.buffer.data):null}redo(){return this.buffer?(this.stack.push(this.buffer),this.buffer=null,this.stack[this.stack.length-1].data):null}clear(){this.stack=[]}}class n{constructor(t){this.app=t,this.zoom=25,this.file=this.app.currentFile,this.grid=!0,this.gridSize=16,this._canvas=document.createElement("canvas"),this._ctx=this.canvas.getContext("2d"),this.canvas.style.backgroundColor="white",this.canvas.width=this.app.files[this.app.fileIndex].width,this.canvas.height=this.app.files[this.app.fileIndex].height,this.canvas.style.backgroundImage="url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'><rect width='16' height='16' fill='none'/><rect x='0' y='0' width='8' height='8' fill='%23f0f0f0'/><rect x='8' y='8' width='8' height='8' fill='%23f0f0f0'/></svg>\")",this.canvas.style.backgroundSize="16px 16px",this.canvas.style.imageRendering="pixelated",this.setZoom(this.zoom),this.canvas.addEventListener("wheel",(t=>{t.preventDefault(),this.zoomChange(t.deltaY)})),document.body.querySelector("#main").append(this.canvas);const e=this.ctx.createImageData(this.file.width,this.file.height);this.canvas.addEventListener("click",(t=>{this.app.history.add(this.ctx.getImageData(0,0,this.file.width,this.file.height));const i=this.canvas.getBoundingClientRect(),s=Math.floor((t.clientX-i.left)/this.zoom),a=4*(Math.floor((t.clientY-i.top)/this.zoom)*this.file.width+s);e.data[a]=this.app.primaryColor[0],e.data[a+1]=this.app.primaryColor[1],e.data[a+2]=this.app.primaryColor[2],e.data[a+3]=this.app.primaryColor[3],this.ctx.putImageData(e,0,0),this.app.history.add(this.ctx.getImageData(0,0,this.file.width,this.file.height))})),this.canvas.addEventListener("mousemove",(t=>{if(1===t.buttons){this.app.history.add(this.ctx.getImageData(0,0,this.file.width,this.file.height));const i=this.canvas.getBoundingClientRect(),s=Math.floor((t.clientX-i.left)/this.zoom),a=4*(Math.floor((t.clientY-i.top)/this.zoom)*this.file.width+s);e.data[a]=this.app.primaryColor[0],e.data[a+1]=this.app.primaryColor[1],e.data[a+2]=this.app.primaryColor[2],e.data[a+3]=this.app.primaryColor[3],this.ctx.putImageData(e,0,0),this.app.history.add(this.ctx.getImageData(0,0,this.file.width,this.file.height))}}))}get canvas(){return this._canvas}get ctx(){return this._ctx}drawRect(t,e,i,s,a){this.ctx.fillStyle=a,this.ctx.fillRect(t,e,i,s)}fill(t,e,i,s){const a=this.file.data[this.app.layerIndex].data;if(t<0||t>=a.width||e<0||e>=a.height)return;const n=e*a.width+t;a.data[n]!==s&&a.data[n]===i&&(a.data[n]=s,this.fill(t+1,e,i,s),this.fill(t-1,e,i,s),this.fill(t,e+1,i,s),this.fill(t,e-1,i,s))}setZoom(t){this.zoom=t,this.canvas.style.width=this.file.width*this.zoom+"px",this.canvas.style.height=this.file.height*this.zoom+"px",this.update()}zoomChange(t=0){const e=Math.sign(t);this.zoom+=8*e,this.setZoom(this.zoom)}zoomIn(){console.log("zoom in"),this.zoom<128&&this.zoomChange(1)}zoomOut(){console.log("zoom out"),this.zoom>1&&this.zoomChange(-1)}zoomReset(){console.log("zoom reset"),this.setZoom(25)}update(){requestAnimationFrame(this.update.bind(this))}}class o{constructor(t,e,i="Dialog",s="",a=!1){this.name=t,this.container=e,this.title=i,this.content=s,this._template=`\n    <style>\n      .dialog {\n        background-color: var(--bg-color);\n        border-radius: 0.5rem;\n        border: 1px solid var(--mid-color);\n        color: var(--fg-color);\n        min-width: 320px;\n        width: 500px;\n      }\n    </style>\n\n    <div class="d-flex" id="DialogHeader${this.name}">\n      <div id="DialogTitle${this.name}">${this.title}</div>\n      <button class="btn btn--icon" id="BtnCloseDialog${this.name}">\n        X\n      </button>\n    </div>\n    <div class="DialogBody DialogBody${this.name}" id="DialogBody${this.name}">\n      ${this.content}\n    </div>\n  `,this.element=document.createElement("dialog"),this.element.className=`dialog Dialog${this.name}`,this.element.open=a,this.container.append(this.element),console.log(this.name),this.header=this.element.querySelector(`#DialogHeader${t}`),this.element.id=`Dialog${t}`,this.element.innerHTML=this._template,this.closeBtn=this.element.querySelector(`#BtnCloseDialog${t}`),this.closeBtn.addEventListener("click",(()=>{this.close()}))}drag(t){let e=0,i=0,s=0,a=0;s=t.clientX,a=t.clientY;const n=t=>{t.preventDefault(),e=s-t.clientX,i=a-t.clientY,s=t.clientX,a=t.clientY,this.element.style.top=this.element.offsetTop-i+"px",this.element.style.left=this.element.offsetLeft-e+"px"},o=()=>{document.removeEventListener("mouseup",o),document.removeEventListener("mousemove",n)};document.addEventListener("mouseup",o),document.addEventListener("mousemove",n)}move(t,e){this.element.style.left=`${t}px`,this.element.style.top=`${e}px`}toggle(){this.element.hasAttribute("open")?this.close():this.open()}open(){this.element.setAttribute("open","")}close(){this.element.removeAttribute("open"),window.localStorage.setItem("startup","false")}}class l{constructor(t){this.app=t,this.commands={n:()=>{this.app.newFile()},nl:()=>{this.app.newLayer()},l:()=>{this.app.ui.layersDialog.toggle()},e:()=>{},w:(t,e)=>{this.app.saveFile(t,{scale:parseInt(e)})},h:()=>{this.app.ui.helpDialog.toggle(),this.app.ui.log("Help")},p:()=>{this.app.ui.paletteDialog.toggle(),this.app.ui.log("Open palette")},P:()=>{},log:t=>{this.app.ui.log(t)},hs:()=>{this.app.ui.startupDialog.toggle()}},this.element=document.createElement("input"),this.element.id="InputCommand",this.app.ui._container.append(this.element),this.element.addEventListener("keydown",(t=>{"Enter"===t.key&&(this.execute(this.element.value),this.close())}))}open(){this.element.classList.add("open"),this.element.focus(),this.element.value=":"}close(){this.element.classList.remove("open"),this.element.value=""}execute(t){t=t.slice(1);const[e,...i]=t.split(" ");console.log(e,i),e in this.commands?this.commands[e](...i):this.app.ui.log(`command not found: ${e}`)}}class h{constructor(t){this.title=t,this.id=Date.now().toString(),this.element=document.createElement("div"),this.tabTitle=document.createElement("span"),this.element.id=this.id,this.element.classList.add("tab"),this.closeBtn=document.createElement("button"),this.closeBtn.id=`#btnClose${this.id}`,this.closeBtn.textContent="X",this.tabTitle.textContent=t,this.element.append(this.tabTitle,this.closeBtn),document.querySelector("#tabs").appendChild(this.element),this.closeBtn.addEventListener("click",(()=>{this.close()}))}deactivateTab(){this.element.classList.remove("active")}activateTab(){this.element.classList.add("active")}rename(t){this.title=t,this.tabTitle.textContent=t}close(){this.element.removeAttribute("open")}}class r{constructor(t){this.app=t,this._container=document.createElement("div"),this.startupDialog=new o("Startup",this._container,"miniwizard",'\n  <div>\n    <b\n      >2023 Â©\n      <a target="_blank" href="https://famiclone.dev">famiclone.dev</a></b\n    >\n    <hr />\n    <br />\n    <div>\n      <b>Esc</b> - Command mode, <b>:new</b> - New file, <b>:h</b> - Open\n      help\n    </div>\n  </div>\n'),this.helpDialog=new o("Help",this._container,"Help","\n  <div>\n    <ul>\n      <li><b>Escape</b> - Open console</li>\n      <li><b>Cmd+</b> - Zoom in</li>\n      <li><b>Cmd-</b> - Zoom out</li>\n      <li><b>Cmd0</b> - Zoom reset</li>\n      <li><b>:?</b> - Open help</li>\n      <li><b>:p</b> - Open palette</li>\n      <li><b>:l</b> - Layers</li>\n      <li><b>:nl</b> - New layer</li>\n      <li><b>:log message</b> - Log message</li>\n      \x3c!-- <li><b>:b / g / e</b> - Change tool (pencil/ bucket / eraser)</li> --\x3e\n    </ul>\n  </div>\n"),this.inputCommand=new l(this.app),this.zoomElement=document.querySelector("#zoom"),this.primaryColorElement=document.querySelector("#toolPrColor"),this.statusLine=document.querySelector("#statusLine"),this.layersDialog=new o("Layers",this._container,"Layers"),this.layersWrap=document.querySelector("#DialogBodyLayers"),this.paletteDialog=new o("Palette",this._container),this.paletteWrap=this.paletteDialog.element.querySelector("#DialogBodyPalette"),this.paletteTitle=this.paletteDialog.element.querySelector("#DialogTitlePalette"),this.tabs=document.querySelector("#tabs"),this.app=t,document.body.append(this._container),window.localStorage.getItem("startup")&&"true"!==window.localStorage.getItem("startup")||this.startupDialog.open(),this.tabs.append(new h("Untitled").element),this.update()}renderPalette(){this.paletteWrap.innerHTML="";const t=document.createElement("div");t.className="palette-wrap",this.paletteTitle.textContent=this.app.palette.name,this.app.palette.colors.forEach(((e,i)=>{const s=document.createElement("div");s.classList.add("color-swatch"),s.style.backgroundColor=`rgba(${e[0]}, ${e[1]}, ${e[2]}, ${e[3]})`,t.append(s),s.addEventListener("click",(()=>{this.app.primaryColor=e,this.update()}))})),this.paletteWrap.append(t)}renderLayers(){this.layersWrap.innerHTML="",this.app.currentFile?.data.forEach(((t,e)=>{const i=document.createElement("div");i.classList.add("layer"),e===this.app.layerIndex&&i.classList.add("active"),i.textContent=t.name,i.addEventListener("click",(()=>{this.app.layerIndex=e,this.update()})),this.layersWrap.append(i)}))}log(t){this.to&&clearTimeout(this.to),this.statusLine.classList.add("open"),this.statusLine.textContent=t,this.to=setTimeout((()=>{this.statusLine.classList.remove("open"),this.statusLine.textContent=""}),2e3)}update(){this.renderPalette(),this.renderLayers(),this.zoomElement.textContent=100*this.app.zoom+"%",this.primaryColorElement.style.backgroundColor=`rgba(${this.app.primaryColor[0]}, ${this.app.primaryColor[1]}, ${this.app.primaryColor[2]}, ${this.app.primaryColor[3]})`}}const c=new class{constructor(){this.history=new a,this.zoom=25,this.tool="pencil",this.color=1,this.files=[],this.fileIndex=0,this.palette=e,this.primaryColor=this.palette.getColor(0),this.palettes=[this.palette],this.ui=new r(this),this.layerIndex=0,this.files.push(new i(16,16)),this.renderer=new n(this),this.setup()}get currentFile(){return this.files[this.fileIndex]}setup(){document.addEventListener("keydown",(t=>{if(t.metaKey&&"="===t.key)return t.preventDefault(),void this.renderer.zoomIn();if(t.metaKey&&"-"===t.key)return t.preventDefault(),void this.renderer.zoomOut();if(t.metaKey&&"0"===t.key)return t.preventDefault(),void this.renderer.zoomReset();if(t.metaKey&&"z"===t.key)return t.preventDefault(),void this.undo();switch(t.key){case"Space":this.ui.inputCommand.element.classList.contains("open")||(t.preventDefault(),this.renderer.canvas.style.cursor="grab",this.renderer.canvas.addEventListener("mousemove",(t=>{1===t.buttons&&(this.renderer.canvas.style.cursor="grabbing",this.renderer.canvas.style.left=`${t.movementX}px`,this.renderer.canvas.style.top=`${t.movementY}px`)})));break;case"?":t.preventDefault(),this.ui.helpDialog.toggle();break;case"Escape":t.preventDefault(),this.ui.inputCommand.element.classList.contains("open")?this.ui.inputCommand.close():this.ui.inputCommand.open()}})),document.addEventListener("keyup",(t=>{if(" "===t.key)t.preventDefault(),this.renderer.canvas.style.cursor="default"})),this.update()}update(){this.renderer.update(),this.ui.update()}newFile(){console.log("new")}newLayer(){const e=new t("Layer "+(this.currentFile.data.length+1),!1,this.currentFile.width,this.currentFile.height);this.currentFile.data.push(e),this.layerIndex=this.currentFile.data.length-1,this.update()}saveFile(t,e={scale:1}){if("png"===t){const i=this.renderer.canvas.toDataURL("image/png"),s=document.createElement("canvas"),a=s.getContext("2d"),n=new Image;return n.src=i,n.onload=()=>{s.width=n.width*e.scale,s.height=n.height*e.scale,a.drawImage(n,0,0,s.width,s.height);const t=document.createElement("a");t.href=s.toDataURL("image/png"),t.download="image.png",t.click()},void this.ui.log(`save file as ${t}`)}this.ui.log(`filetype ${t} is not supported`)}undo(){this.history.undo()}redo(){this.history.redo()}changeTool(t){this.tool=t}};window.app=c})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,