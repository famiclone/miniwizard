(()=>{"use strict";class t{constructor(t){this.selector=t,this.element=document.querySelector(`#${t}`),this.closeBtn=this.element.querySelector(`#btnClose${t}`),this.closeBtn.addEventListener("click",(()=>{this.close()}))}toggle(){this.element.hasAttribute("open")?this.close():this.open()}open(){this.element.setAttribute("open","")}close(){this.element.removeAttribute("open"),window.localStorage.setItem("startup","false")}}class e{constructor(){this.opacity=255,this.visible=!0,this.data=[[]],this.x=0,this.y=0,this.width=0,this.height=0}}const s=new class{constructor(t="New palette"){this.name=t,this.colors=[[]]}addColor(t){this.colors.push(t)}removeColor(t){this.colors.splice(t,1)}setColor(t,e){this.colors[t]=e}getColor(t){return this.colors[t]}}("Default");s.colors=[[0,0,0,255],[255,255,255,255],[255,0,0,255],[0,255,0,255],[0,0,255,255]];class i{constructor(){this.data=[],this.width=16,this.height=16,this.palette=s,this.data=[new e]}}class o{constructor(t,e){this.selector=t,this.app=e,this.commands={n:()=>{this.app.newFile()},e:()=>{},w:()=>{this.app.saveFile()},h:()=>{this.app.ui.helpDialog.toggle(),this.app.ui.log("Help")},p:()=>{this.app.ui.paletteDialog.toggle(),this.app.ui.log("Open palette")},P:()=>{},log:t=>{this.app.ui.log(t)}},this.element=document.querySelector(`#${t}`),this.element.addEventListener("keydown",(t=>{"Enter"===t.key&&(this.execute(this.element.value),this.close())}))}open(){this.element.classList.add("open"),this.element.focus(),this.element.value=":"}close(){this.element.classList.remove("open"),this.element.value=""}execute(t){t=t.slice(1);const[e,...s]=t.split(" ");console.log(e,s),e in this.commands?this.commands[e](...s):this.app.ui.log(`command not found: ${e}`)}}class a{constructor(t){this.app=t,this.items=[],this.cursor=this.items.length-1}add(t){this.items.push(t),this.cursor=this.items.length-1}clearFromCursor(){this.items.splice(this.cursor+1)}undo(){this.cursor>0&&(this.cursor--,this.app.ctx.putImageData(this.items[this.cursor],0,0))}redo(){this.cursor<this.items.length-1&&(this.cursor++,this.app.ctx.putImageData(this.items[this.cursor],0,0))}}class h{constructor(e){this.app=e,this.startupDialog=new t("DialogStartup"),this.helpDialog=new t("DialogHelp"),this.inputCommand=new o("InputCmd",this.app),this.zoomElement=document.querySelector("#zoom"),this.primaryColorElement=document.querySelector("#toolPrColor"),this.statusLine=document.querySelector("#statusLine"),this.paletteDialog=new t("DialogPalette"),this.paletteWrap=document.querySelector("#paletteWrap"),this.paletteTitle=document.querySelector("#paletteTitle"),this.app=e,window.localStorage.getItem("startup")&&"true"!==window.localStorage.getItem("startup")||this.startupDialog.open(),this.update()}renderPalette(){this.paletteWrap.innerHTML="",this.paletteTitle.textContent=this.app.palette.name,this.app.palette.colors.forEach(((t,e)=>{const s=document.createElement("div");s.classList.add("color-swatch"),s.style.backgroundColor=`rgba(${t[0]}, ${t[1]}, ${t[2]}, ${t[3]})`,this.paletteWrap.append(s),s.addEventListener("click",(()=>{this.app.primaryColor=t,this.update()}))}))}log(t){this.to&&clearTimeout(this.to),this.statusLine.classList.add("open"),this.statusLine.textContent=t,this.to=setTimeout((()=>{this.statusLine.classList.remove("open"),this.statusLine.textContent=""}),2e3)}update(){this.renderPalette(),this.zoomElement.textContent=100*this.app.zoom+"%",this.primaryColorElement.style.backgroundColor=`rgba(${this.app.primaryColor[0]}, ${this.app.primaryColor[1]}, ${this.app.primaryColor[2]}, ${this.app.primaryColor[3]})`}}const l=new class{constructor(){this.history=new a(this),this.zoom=25,this.tool="pencil",this.layer=0,this.color=1,this.file=new i,this.palette=s,this.primaryColor=this.palette.getColor(0),this.palettes=[this.palette],this.ui=new h(this),this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.canvas.style.backgroundColor="white",this.canvas.width=this.file.width,this.canvas.height=this.file.height,this.canvas.style.width=this.file.width*this.zoom+"px",this.canvas.style.height=this.file.height*this.zoom+"px",this.canvas.style.imageRendering="pixelated",this.canvas.addEventListener("wheel",(t=>{t.preventDefault(),this.zoomChange(t.deltaY)})),document.body.querySelector("#main").append(this.canvas);const t=this.ctx.createImageData(16,16);for(let e=0;e>this.file.data.length;e++)for(let i=0;i<16;i++)for(let o=0;o<16;o++){const a=this.file.palette?this.file.palette.getColor(this.file.data[e].data[i][o]):s.getColor(this.file.data[e].data[i][o]),h=4*(16*i+o);t.data[h]=a[0],t.data[h+1]=a[1],t.data[h+2]=a[2],t.data[h+3]=a[3]}this.ctx.putImageData(t,0,0),this.canvas.addEventListener("click",(e=>{this.history.add(this.ctx.getImageData(0,0,16,16));const s=this.canvas.getBoundingClientRect(),i=Math.floor((e.clientX-s.left)/this.zoom),o=4*(16*Math.floor((e.clientY-s.top)/this.zoom)+i);t.data[o]=this.primaryColor[0],t.data[o+1]=this.primaryColor[1],t.data[o+2]=this.primaryColor[2],t.data[o+3]=this.primaryColor[3],this.ctx.putImageData(t,0,0),this.history.add(this.ctx.getImageData(0,0,16,16))})),this.canvas.addEventListener("mousemove",(e=>{if(1===e.buttons){this.history.add(this.ctx.getImageData(0,0,16,16));const s=this.canvas.getBoundingClientRect(),i=Math.floor((e.clientX-s.left)/this.zoom),o=4*(16*Math.floor((e.clientY-s.top)/this.zoom)+i);t.data[o]=this.primaryColor[0],t.data[o+1]=this.primaryColor[1],t.data[o+2]=this.primaryColor[2],t.data[o+3]=this.primaryColor[3],this.ctx.putImageData(t,0,0),this.history.add(this.ctx.getImageData(0,0,16,16))}})),document.addEventListener("keydown",(t=>{if(t.metaKey&&"="===t.key)return t.preventDefault(),void this.zoomIn();if(t.metaKey&&"-"===t.key)return t.preventDefault(),void this.zoomOut();if(t.metaKey&&"0"===t.key)return t.preventDefault(),void this.zoomReset();if(t.metaKey&&"z"===t.key)return t.preventDefault(),void this.undo();switch(t.key){case"Space":this.ui.inputCommand.element.classList.contains("open")||(t.preventDefault(),this.canvas.style.cursor="grab",this.canvas.addEventListener("mousemove",(t=>{1===t.buttons&&(this.canvas.style.cursor="grabbing",this.canvas.style.left=`${t.movementX}px`,this.canvas.style.top=`${t.movementY}px`)})));break;case"?":t.preventDefault(),this.ui.helpDialog.toggle();break;case"Escape":t.preventDefault(),this.ui.inputCommand.element.classList.contains("open")?this.ui.inputCommand.close():this.ui.inputCommand.open()}})),document.addEventListener("keyup",(t=>{if(" "===t.key)t.preventDefault(),this.canvas.style.cursor="default"})),this.update()}update(){this.canvas.style.width=this.file.width*this.zoom+"px",this.canvas.style.height=this.file.height*this.zoom+"px",this.ui.update()}newFile(){console.log("new")}saveFile(){console.log("save")}undo(){this.history.undo()}redo(){this.history.redo()}zoomChange(t=0){const e=Math.sign(t);this.zoom+=8*e,this.update()}zoomIn(){console.log("zoom in"),this.zoom<128&&this.zoomChange(1)}zoomOut(){console.log("zoom out"),this.zoom>1&&this.zoomChange(-1)}zoomReset(){console.log("zoom reset"),this.zoom=25,this.update()}changeTool(t){this.tool=t}};window.app=l})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,